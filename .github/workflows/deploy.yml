name: Deploy

on:
  workflow_run:
    workflows: ["Python CI", "TypeScript CI"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Run ID (Python)
        uses: actions/download-artifact@v4
        with:
          name: python-run-id
          path: python-run-id

      - name: Read Run ID (Python)
        id: python-run-id
        run: echo "::set-output name=run_id::$(cat python-run-id/run_id.txt)"

      - name: Download Python Lambda artifact
        uses: actions/download-artifact@v4
        with:
          name: python-lambda
          path: my_python_service/src/function.zip
          run-id: ${{ steps.python-run-id.outputs.run_id }}
          repository: ${{ github.repository }}

      - name: Download Run ID (TypeScript)
        uses: actions/download-artifact@v4
        with:
          name: typescript-run-id
          path: typescript-run-id

      - name: Read Run ID (TypeScript)
        id: typescript-run-id
        run: echo "::set-output name=run_id::$(cat typescript-run-id/run_id.txt)"

      - name: Download TypeScript Lambda artifact
        uses: actions/download-artifact@v4
        with:
          name: typescript-lambda
          path: my_ts_service/dist/function.zip
          run-id: ${{ steps.typescript-run-id.outputs.run_id }}
          repository: ${{ github.repository }}

      - name: Verify Python Lambda artifact
        run: |
          if [ ! -f my_python_service/src/function.zip ]; then
            echo "Python Lambda artifact not found"
            exit 1
          fi

      - name: Verify TypeScript Lambda artifact
        run: |
          if [ ! -f my_ts_service/dist/function.zip ]; then
            echo "TypeScript Lambda artifact not found"
            exit 1
          fi

      - name: List files for debugging (Python)
        run: ls -R my_python_service/src

      - name: List files for debugging (TypeScript)
        run: ls -R my_ts_service/dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Initialize Terraform
        run: terraform init
        working-directory: terraform

      - name: Apply Terraform
        run: terraform apply -auto-approve
        working-directory: terraform