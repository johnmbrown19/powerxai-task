name: Deploy

on:
  workflow_run:
    workflows: ["Python CI", "TypeScript CI"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GitHub CLI
        run: |
          echo "Listing all artifacts in the repository"
          gh api -X GET repos/${{ github.repository }}/actions/artifacts --paginate
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch artifact download URLs
        id: artifact-urls
        run: |
          python <<EOF
          import os
          import requests
          import json

          repo = os.getenv('GITHUB_REPOSITORY')
          token = os.getenv('GITHUB_TOKEN')
          headers = {'Authorization': f'token {token}'}
          url = f'https://api.github.com/repos/{repo}/actions/artifacts'
          response = requests.get(url, headers=headers)
          artifacts = response.json()['artifacts']

          python_artifact = next((artifact for artifact in artifacts if artifact['name'] == 'python-lambda'), None)
          ts_artifact = next((artifact for artifact in artifacts if artifact['name'] == 'typescript-lambda'), None)

          if python_artifact:
              with open(os.getenv('GITHUB_ENV'), 'a') as env_file:
                  env_file.write(f'PYTHON_URL={python_artifact["archive_download_url"]}\n')
          if ts_artifact:
              with open(os.getenv('GITHUB_ENV'), 'a') as env_file:
                  env_file.write(f'TS_URL={ts_artifact["archive_download_url"]}\n')
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Python Lambda artifact manually
        if: env.PYTHON_URL
        run: |
          curl -L -o python-lambda.zip "$PYTHON_URL"
          unzip python-lambda.zip -d my_python_service/src

      - name: Download TypeScript Lambda artifact manually
        if: env.TS_URL
        run: |
          curl -L -o typescript-lambda.zip "$TS_URL"
          unzip typescript-lambda.zip -d my_ts_service/dist

      - name: List files for debugging (Python)
        run: ls -R my_python_service/src

      - name: List files for debugging (TypeScript)
        run: ls -R my_ts_service/dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Initialize Terraform
        run: terraform init
        working-directory: terraform

      - name: Apply Terraform
        run: terraform apply -auto-approve
        working-directory: terraform
