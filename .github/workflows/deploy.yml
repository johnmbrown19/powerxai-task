name: Deploy

on:
  workflow_run:
    workflows: ["Python CI", "TypeScript CI"]
    types: [completed]
    branches: [main]

jobs:
  deploy:
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      (github.event.workflow_run.name == 'Python CI' || github.event.workflow_run.name == 'TypeScript CI')
    runs-on: ubuntu-latest

    permissions:
      contents: read
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Print event payload
        run: echo '${{ toJson(github.event) }}'

      - name: Print Python CI status
        if: ${{ github.event.workflow_run.name == 'Python CI' }}
        run: echo 'Python CI workflow succeeded'

      - name: Print TypeScript CI status
        if: ${{ github.event.workflow_run.name == 'TypeScript CI' }}
        run: echo 'TypeScript CI workflow succeeded'

      - name: Print artifacts URL
        run: echo ${{ github.event.workflow_run.artifacts_url }}

      - name: Print workflow run context
        run: echo '${{ toJson(github.event.workflow_run) }}'

      - name: Download artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          artifacts_url=${{ github.event.workflow_run.artifacts_url }}
          curl -s -H "Authorization: Bearer $GH_TOKEN" $artifacts_url > artifacts.json

      - name: Print artifacts data
        run: cat artifacts.json

      - name: Extract Python Lambda artifact
        run: |
          artifact_download_url=$(jq -r '.artifacts[] | select(.name == "python-lambda") | .archive_download_url' artifacts.json)
          curl -s -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -o python-lambda.zip $artifact_download_url
          unzip python-lambda.zip -d my_python_service/build/

      - name: Extract TypeScript Lambda artifact
        run: |
          artifact_download_url=$(jq -r '.artifacts[] | select(.name == "typescript-lambda") | .archive_download_url' artifacts.json)
          curl -s -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -o typescript-lambda.zip $artifact_download_url
          unzip typescript-lambda.zip -d my_ts_service/build/

      - name: List files for debugging (Python)
        run: ls -R my_python_service/build

      - name: List files for debugging (TypeScript)
        run: ls -R my_ts_service/build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Initialize Terraform
        run: terraform init
        working-directory: terraform

      - name: Apply Terraform
        run: terraform apply -auto-approve
        working-directory: terraform